/* Gerris - The GNU Flow Solver
 * Copyright (C) 2009-2012 National Institute of Water and Atmospheric Research
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.  
 */

#include "particulatecommon.h"
#include "output.h"
#include "unstructured.h"

/* GfsPdfParticle: header */

typedef struct _GfsPdfParticle GfsPdfParticle;

struct _GfsPdfParticle{
  /*< private >*/
  GfsOutput parent;
  
  /*< public >*/
  gint level;
  gchar * name;
  gint nbins;
  gdouble dbin;
  gdouble rmin,rmax;
  GfsVariable *c;  
  GfsVariable *npcell,*meanpcell,*sdpcell;
};

#define GFS_PDF_PARTICLE(obj)            GTS_OBJECT_CAST (obj,\
					         GfsPdfParticle,\
					         gfs_pdf_particle_class ())

#define GFS_IS_PDF_PARTICLE(obj)         (gts_object_is_from_class (obj,\
					         gfs_pdf_particle_class ()))

GfsOutputClass * gfs_pdf_particle_class  (void);

typedef struct {
  FttVector pos, vel;
  gdouble volume;
} Droplets;

typedef struct {
  GfsVariable * tag, * c;
  Droplets * drops;
  guint * sizes;
  GfsVariable **u;
  guint n;
  gdouble rmin,rmax;
  GfsPdfParticle *pdf;
  GfsDomain *domain;
} DropletsPar;

static void compute_droplet_properties (FttCell * cell, DropletsPar * p)
{
  gint i = GFS_VALUE (cell, p->tag);
  gdouble h = ftt_cell_size (cell), vol;
  FttVector pos; 
  ftt_cell_pos (cell, &pos);
  GfsVariable ** u = p->u;

  if (i > 0) {
    p->sizes[i - 1]++;
    vol = pow (h, FTT_DIMENSION);
    p->drops[i-1].volume += vol*GFS_VALUE (cell, p->c);
    FttComponent c;
    for(c = 0; c < FTT_DIMENSION; c++){
      (&(p->drops[i-1].pos.x))[c] +=  (&pos.x)[c];
      (&(p->drops[i-1].vel.x))[c] += GFS_VALUE (cell,u[c]);
    }
  }  
}

static void reset_pdf (FttCell * cell, GfsPdfParticle * p)
{
  GFS_VALUE(cell,p->npcell) = 0;
  GFS_VALUE(cell,p->meanpcell) = 0;
  GFS_VALUE(cell,p->sdpcell) = 0;
}

static void write_pdf (FttCell * cell, DropletsPar * p)
{
  GfsPdfParticle *pdf = p->pdf;
  GfsDomain *domain = p->domain;
  FILE * fp = GFS_OUTPUT (pdf)->file->fp;
  FttVector pos;
  ftt_cell_pos(cell,&pos);  

  fprintf(fp,"%lf %lf %lf\n",pos.x,pos.y,pos.z);
  gdouble *binfill = g_malloc0((pdf->nbins)*sizeof (double));
  for (int i = 0; i < p->n; i++){
    FttCell * cell1 = gfs_domain_locate (domain, p->drops[i].pos, pdf->level, NULL);  
    if(cell1==cell){
      gdouble dia = 2.*pow(3./(4.*M_PI)*p->drops[i].volume,0.333333);
      int k = (int)(dia/pdf->dbin);
      if(k > pdf->nbins-1) k = pdf->nbins-1;
      //     printf("%d %lf %lf\n",k,dia/pdf->dbin,dia,pdf->dbin);
      binfill[k]++;
    }   
  }
  for(int i=0; i<pdf->nbins;i++) fprintf(fp,"%3.14lf %lf\n", (pdf->dbin*i + p->rmin), binfill[i]);  
  g_free(binfill);
  /*To print the cumulants of the pdf*/
 //      fprintf(fp,"%lf %lf %lf %d %lf\n",pos.x,pos.y,pos.z, (int) GFS_VALUE(cell,p->npcell), GFS_VALUE(cell,p->meanpcell)); 
   

}

static gboolean gfs_pdf_particle_event (GfsEvent * event, GfsSimulation * sim)
{ 
  if ((* GFS_EVENT_CLASS (GTS_OBJECT_CLASS (gfs_pdf_particle_class ())->parent_class)->event)
      (event, sim)) {  


   GfsPdfParticle *pdf = GFS_PDF_PARTICLE(event);
   GfsDomain *domain = GFS_DOMAIN(gfs_object_simulation(pdf));
   FILE * fp = GFS_OUTPUT(event)->file->fp;
   DropletsPar p;
   p.u = gfs_domain_velocity (domain);
   p.c = pdf->c;
   p.tag = gfs_temporary_variable (domain);
   p.pdf = pdf;

   p.n = gfs_domain_tag_droplets (domain, p.c, p.tag);
   p.domain = domain;
   gdouble meandrop = 0.;
   if (p.n > 0){
     FttComponent c;
     p.sizes = g_malloc0 (p.n*sizeof (guint));  
     p.drops = g_malloc0 (p.n*sizeof (Droplets));

     /* Initialize drops */
     for (int i = 0; i < p.n; i++){
       p.drops[i].volume = 0.;
       p.sizes[i] = 0;
       for(c = 0; c < FTT_DIMENSION; c++) {
	 (&(p.drops[i].pos.x))[c] = 0.;
	 (&(p.drops[i].vel.x))[c] = 0.;
       }
     }
    
     gfs_domain_cell_traverse (domain, FTT_PRE_ORDER, FTT_TRAVERSE_LEAFS, -1,
			       (FttCellTraverseFunc) compute_droplet_properties, &p);
     
     /* Average Pos and Velocity drops */
     p.rmin = 100.;
     p.rmax = 0.;
     for (int i = 0; i < p.n; i++){
       p.rmin = MIN(p.rmin,p.drops[i].volume);
       p.rmax = MAX(p.rmax,p.drops[i].volume);
       meandrop += p.drops[i].volume;
       for(c = 0; c < FTT_DIMENSION; c++) {
	 (&(p.drops[i].pos.x))[c] /= p.sizes[i];
	 (&(p.drops[i].vel.x))[c] /= p.sizes[i];
       }
     }
   }
   
/*     gfs_domain_cell_traverse (domain, FTT_PRE_ORDER, FTT_TRAVERSE_LEAFS, -1, */
/* 			    (FttCellTraverseFunc) reset_pdf, pdf);  */
  
/*    for (int i = 1; i < p.n; i++){ */
/*     FttCell * cell = gfs_domain_locate (domain, p.drops[i].pos, pdf->level, NULL);   */
/*     GFS_VALUE(cell, pdf->npcell) = GFS_VALUE(cell, pdf->npcell) + 1;  */
/*     gdouble dia = 2.*pow(p.drops[i].volume/M_PI,1./2.); */
/* #if !FTT_2D */
/*     dia = 2.*pow(3.0*(p.drops[i].volume)/4.0/M_PI, 1./3.); */
/* #endif        */
/*     GFS_VALUE(cell, pdf->meanpcell) = (GFS_VALUE(cell, pdf->meanpcell) */
/* 				       *(GFS_VALUE(cell, pdf->npcell)-1) + dia)/(GFS_VALUE(cell, pdf->npcell));    */
/*    } */

   p.rmax = 2.*pow(3./(4.*M_PI)*p.rmax,0.33333);
   p.rmin = 2.*pow(3./(4.*M_PI)*p.rmin,0.333333);
   meandrop = 2.*pow(3./(4.*M_PI)*meandrop/p.n,0.333333);
   pdf->dbin = (meandrop - p.rmin)/(pdf->nbins/2.);
   if(pdf->dbin==0) pdf->dbin = 100000.;
   gfs_domain_cell_traverse (domain, FTT_PRE_ORDER, FTT_TRAVERSE_ALL, pdf->level,
   		     (FttCellTraverseFunc) write_pdf, &p); 
  
   g_free (p.drops);
   g_free (p.sizes);
   return TRUE;
  }
  return FALSE;
}


static void gfs_pdf_particle_destroy (GtsObject * o)
{

 (* GTS_OBJECT_CLASS (gfs_pdf_particle_class ())->parent_class->destroy) (o); 
}

static void gfs_pdf_particle_read (GtsObject ** o, GtsFile * fp)
{  
  if (GTS_OBJECT_CLASS (gfs_pdf_particle_class ())->parent_class->read)
    (* GTS_OBJECT_CLASS (gfs_pdf_particle_class ())->parent_class->read) (o, fp);
  if (fp->type == GTS_ERROR)
    return;

  GfsPdfParticle *pdf = GFS_PDF_PARTICLE(*o);
  GfsDomain *domain = GFS_DOMAIN(gfs_object_simulation(pdf));

  if (fp->type != GTS_INT){
    gts_file_error (fp, "expecting an init");
    return;
  }
  else
    pdf->level = atoi(fp->token->str);

  gts_file_next_token(fp);

  if (fp->type != GTS_INT){
    gts_file_error (fp, "expecting an init: no. bins");
    return;
  }
  else
    pdf->nbins = atoi(fp->token->str);

  gts_file_next_token(fp);

  if ((pdf->c = gfs_variable_from_name (domain->variables, fp->token->str)) == NULL) {
    gts_file_error (fp, "unknown variable `%s'", fp->token->str);
    return;
  }
  gts_file_next_token (fp);

  pdf->npcell = gfs_domain_get_or_add_variable (domain, "Npcell", 
						  "Number of particles in cell");  
  pdf->meanpcell = gfs_domain_get_or_add_variable (domain, "Meanpcell", 
						   "Mean size of the particles");
  pdf->sdpcell = gfs_domain_get_or_add_variable (domain, "Sdpcell", 
						   "Standard deviation of particle size");

}

static void gfs_pdf_particle_write (GtsObject * o, FILE * fp)
{
  (* GTS_OBJECT_CLASS (gfs_pdf_particle_class ())->parent_class->write) (o, fp);

  GfsPdfParticle *pdf = GFS_PDF_PARTICLE(o);

  fprintf(fp," %d %d %s", pdf->level, pdf->nbins, pdf->c->name);
}

static void gfs_pdf_particle_init ( GfsPdfParticle * pdf)
{
  pdf->level = 0;
}

static void gfs_pdf_particle_class_init (GfsEventClass * klass)
{
  GFS_EVENT_CLASS (klass)->event    = gfs_pdf_particle_event;
  GTS_OBJECT_CLASS (klass)->destroy = gfs_pdf_particle_destroy;
  GTS_OBJECT_CLASS (klass)->read    = gfs_pdf_particle_read;
  GTS_OBJECT_CLASS (klass)->write   = gfs_pdf_particle_write;  
}

GfsOutputClass * gfs_pdf_particle_class (void)
{
  static GfsOutputClass * klass = NULL;

  if (klass == NULL) {
    GtsObjectClassInfo gfs_pdf_particle_info = {
      "GfsPdfParticle",
      sizeof (GfsPdfParticle),
      sizeof (GfsEventClass),
      (GtsObjectClassInitFunc) gfs_pdf_particle_class_init,
      (GtsObjectInitFunc) gfs_pdf_particle_init,
      (GtsArgSetFunc) NULL,
      (GtsArgGetFunc) NULL
    };
    klass = gts_object_class_new (GTS_OBJECT_CLASS (gfs_output_class ()),
				  &gfs_pdf_particle_info);
  }
  return klass;
}
/* Initialize module */

const gchar gfs_module_name[] = "particulates";
const gchar * g_module_check_init (void);

const gchar * g_module_check_init (void)
{ 
  gfs_particulate_class ();
  gfs_particle_list_class ();
  gfs_force_lift_class ();
  gfs_force_drag_class ();
  gfs_force_buoy_class ();
  gfs_particle_force_class ();
  gfs_source_particulate_class ();

  gfs_droplet_to_particle_class ();
  gfs_particle_to_droplet_class ();
  gfs_feed_particle_class ();
  // gfs_feed_particle2_class ();
  gfs_particulate_field_class ();

  gfs_pdf_particle_class ();
  return NULL; 
}
